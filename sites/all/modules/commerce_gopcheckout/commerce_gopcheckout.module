<?php
/**
 * Implements hook_commerce_checkout_pane_info()
 */
function commerce_gopcheckout_commerce_checkout_pane_info() {
  $panes['commerce_gopcheckout'] = array(
    'title' => t('GOP Checkout On January 20'),
    'page' => 'checkout',
    'weight' => 10,
    'base' => 'commerce_gopcheckout_pane',
  );
  return $panes;
}
function commerce_gopcheckout_form_commerce_checkout_form_alter(&$form,
	&$form_state,$form_id)
{
	variable_set("aaa5","Made it into the form alter routine on February 18");
	global $user;
	switch($form_id){
		case 'commerce_checkout_form_checkout':
			if (isset ($form[customer_profile_accountinformationi])){
				$form['body'] = array(
				'#markup' => '<p><h3>Please fill in the form below and then proceed to 
					the payment process by clicking on the Continue to Next Step button 
					at the bottom of the form</h3></p>',
				'#weight' => '0'
				);
		 	}
			elseif (isset($form[customer_profile_member])){
				$form['body'] = array(
					'#markup' => '<p><h3>We are looking forward to seeing you at this 
						event! Please fill in your name<br>so we know you are coming and 
						then click the Finish Registering button below.<br><br> We will 
						see you there!</h3></p>',
					'#weight' => '0'
				);
				$form['#action'] = '/ForumConfirmation';
				$form['customer_profile_member']['field_wcgopmembername']
					['#access'] = FALSE;
				$form['buttons']['continue']['#access'] = FALSE;
				$form['buttons']['cancel']['#access'] = FALSE;
				$form['customer_profile_member']['field_wcgopordername']['und']['0']
					['value']['#title'] = 'Please enter the name for this order here';
				$form['customer_profile_member']['field_wcgopordername']['und']['0']
					['#description'] = 'Please enter the name for this order here';
				$form['actions']['continue']['#type'] = 'submit';
				$form['actions']['continue']['#value'] = 'Finish Registering';
				$form['actions']['continue']['#submit'] = array(
					'commerce_gopcheckout_finishorder');		
				$form['account']['login']['mail']['#required'] = FALSE;
				$form['account']['#access'] = FALSE;
			}
			elseif (isset($form['customer_profile_non_paying_cu'])){
				$form['body'] = array(
					'#markup' => '<p><h3>Please enter a little information about this 
						individual.  Only the first and last names are mandatory.</h3></p>',
					'#weight' => '-10'
					);
					$form['buttons']['continue']['#value'] = 'Complete this Non Paying Registration';
					$form['buttons']['continue']['#submit'] = array(
					     'commerce_gopcheckout_completenonpayingcustomer');
					kpr ($form);
				break;
			}
			else {
/*
		This is the normal case when our customer profile is billing.  This code
		will run if an order is in the "shopping cart" state [i.e., is not
		completed].  The url will be home/checkout/order#
*/
		
				$order = commerce_cart_order_load($user->uid);
				$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
				if ($order_wrapper->field_payatdoor->value()){
					$form['body'] = array(
							'#markup' => '<p><h3>Even though you are paying at the door, 
							     Federal and state law require us to collect this information.
							     Please fill in the form below and then complete this process
							     by clicking on the Continue to Next Step button at the bottom
							      of the form.  Please note that we can only accept checks and
							       money orders at the door.</h3></p>',
							'#weight' => '-10'
				);
				}
				else {
					$form['body'] = array(
							'#markup' => '<p><h3>Federal and state law require us to 
								collect this information.  Please fill in the form below and 
								then proceed to the payment process by clicking on the Continue 
								to the very next Next Step button at the bottom of the form</h3></p>',
							'#weight' => '-10'
				);		
				}
				$statesarray = array (
		  		'visible' => array (
		    		 ':input[name="customer_profile_billing[field_gopstoreemployed]
		    		 [und]"]' => array('value' => '1')
		     	)
		     ); 
				$form['customer_profile_billing']['field_gopstoreemployer']
					['#states'] = $statesarray;
				$form['customer_profile_billing']['field_gopstoremyemployeraddress']
					['#states'] = $statesarray;
				$form['buttons']['continue']['#value'] = 'Continue to the Next Step';
/*
		Here we take over the routing of the checkout process by changing the 
		#submit property of the continue button. It is necessary to make our routine
		[commerce_gopcheckout_gopordercheck] first in line [hence the 
		array_unshift].  Note that this leaves the rest of the commerce form 
		processing submit routines intact.  They will take over the job of 
		processing this form after my routine, gopordercheck, is complete, unless 
		either the paidbycheck indicator is checked on the form or the payatthedoor
		indicator has been set for this order.  In these cases we'll just go 
		directly to checkout complete.  
*/
				array_unshift($form['buttons']['continue']['#submit'],
					'commerce_gopcheckout_gopordercheck');
				kpr ($form);
 				kpr($form_state);
		break;
	}
		case 'commerce_checkout_form_review' :
			$form['buttons']['continue']['#value'] = "Make Your Primo Payment";
			break;
//	kpr($statesarray);
//	kpr($form);
	return;
}
}
/*
		This is the routine that processes a click of the "Continue to the next
		step" button on the Commerce Checkout form.  
*/
function commerce_gopcheckout_gopordercheck($form,&$form_state) {
		global $user;
		$order = commerce_cart_order_load($user->uid);
		$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
		$order_wrapper->field_orderattached->set($order->order_id);
		if ($form['customer_profile_billing']['field_paidbycheck']['und']
		['#value'] || $order_wrapper->field_payatdoor->raw()) { 
			commerce_order_status_update($order,'pending');
			commerce_order_save($order);
			drupal_goto('checkout/' . $order->order_id . '/complete' ) ;
		}
		return;
}
function commerce_gopcheckout_form_alter(&$form,&$form_state,$form_id) {
	global $user;

// Load cart order

	$order = commerce_cart_order_load($user->uid);
	if ($order)  {
  // Let's use the wrapper because it rocks
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $delta => 
  	$line_item_wrapper) {
  	$line_item = $line_item_wrapper->value();
    }
}
	
	$addcartform = substr($form_id,0,30);
		switch ($addcartform) {
			case 'commerce_cart_add_to_cart_form':
				foreach ($form['product_id']['#options'] as $key => $value) {
      		$form['product_id']['#options'][$key] = check_plain($value);
    		}
//  		kpr ($form);
/*
			Take over theming the add to cart form.  After setting the atcformid
			variable, we force Druapl to rebuild the theme registry; this, in turn,
			invokes hook_theme, which checks for atcformid, and, if found, stores
			an entry for this form id in the theme registry.
*/
			
			variable_set('atcformid',$form_id);
			drupal_theme_rebuild();

		
			$form['product_id']['#type'] = 'radios';
			$form['line_item_fields']['field_mgdonationlevel']['und']['#title']=
				"<h3><strong>Please choose below the amount you wish to donate and then 
				click on the Add to Cart button</strong></h3>";
			$form['line_item_fields']['field_forumdonation']['und']['#title'] = "";
			$form['line_item_fields']['field_wcgopmember']['und']['#title'] = 
				"<strong>Please check this box if you are a member of the Washtenaw 
				County Republican Party</strong>";
			$form['line_item_fields']['field_wcgopmemberpurchase']['und']['#title'] = 
				"<strong>Please check this box if you would like to purchase a 
				membership in the Washtenaw County Republican Party</strong>";
			$form['line_item_fields']['field_wcgopattendevent']['und']['#title'] = 
				"<strong>Please check this box if you would like to attend the event, 
				but do not wish to purchase a WCGOP memberhship</strong>";
			$form['line_item_fields']['field_wcgopmembername']['und']['0']['#title'] =
				 "hidden";
			$form['line_item_fields']['field_wcgopmembername']['und']['0']['value']
				['#title'] = "After making your selection, please enter your name <br> 
				in this box and click click click the Add To Cart button below";
			$form['line_item_fields']['field_wcgopmembername']['und']['#title'] = 
				"hidden";
			$form['attributes']['field_forummenu']['#title']="";
			$form['attributes']['field_menu2017']['#title']="";
			$form['attributes']['field_sponsorship2017']['#title']="";
			$membersarray = array( 
		  	'visible' => array (
		     	':input[name="line_item_fields[field_wcgopmember][und]"]' => array(
		     		'checked' => TRUE)
		     	)
		  ); 
			$form['line_item_fields']['field_wcgopmembername']['#states'] = 
				$membersarray;
			break;
	}
		switch ($form_id) {
			case 'views_form_commerce_cart_form_default':
					kpr ($order);
					$form['actions']['payatdoor']['#type'] = 'submit';
					$form['actions']['payatdoor']['#value'] = 'Pay at Door';
					$form['actions']['payatdoor']['#submit'] = array(
					  'commerce_gopcheckout_setpayatdoor');
					$form['actions']['payatdoor']['#weight'] = '-1500';
					if (in_array('superadmin user', array_values($user->roles))){
						$form['actions']['npc']['#type'] = 'submit';
						$form['actions']['npc']['#value'] = 'Non Paying Customer';
						$form['actions']['npc']['#submit'] = array(
							'commerce_gopcheckout_setpaidbyother');
						$form['actions']['npc']['#weight'] = '-1800';
					}
					
					kpr ($form);
					break;
			case 'commerce_checkout_form_complete':
				$form['checkout_completion_message']['message']['#markup'] = 
					'<p><h3>Thank you for this order and for your continued support of 
					the Washtenaw County Republican Party!</h3></p>';
				break;
		}
	return;
}
/*
			Implement my own theming of the add to cart form. The hook_theme function
			changes the theming function for the current form.
			
			NOTE:  It is entirely possible that I will want to have multiple theming
			functions, and if I do so I will want to differentiate between them here
			and return a different array depending on the kind of form theming I
			want to do.
*/
function commerce_gopcheckout_theme(){
			$form_id = variable_get('atcformid');
			if (isset ($form_id)){
			return array(
			$form_id => array(
				'render element' => 'form',
				'function' => 'wcgopatctheme'
			),
			);
		}
}
function wcgopatctheme($variables){
				$output = '<span class="wcgopatc" style="inline" style="color:red">';
				$output .= render($variables['form']['line_item_fields']
					['field_badge_name']);
				$output .= render($variables['form']['submit']);
				$output .= '</span>';
				$output .=  drupal_render_children($variables['form']);
				return $output;
}
function commerce_gopcheckout_setpayatdoor($form, &$form_state) {
	global $user;
	variable_set("aaa11","Made it into the commerce_gopcheckout_submit routine");
	$order = commerce_cart_order_load($user->uid);
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$order_wrapper->field_payatdoor->set('1');	
	commerce_order_save($order);
	drupal_set_message('You made it into the button submit routine!');
	drupal_goto('checkout/' . $order->order_id);
}
function commerce_gopcheckout_setpaidbyother($form, &$form_state){
	global $user;
	$order = commerce_cart_order_load($user->uid);
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$order_wrapper->field_paidbyotheriii->set('1');	
	commerce_order_save($order);
	drupal_goto('checkout/' . $order->order_id);
}
function commerce_gopcheckout_completenonpayingcustomer($form,$form_state){
	global $user;
	$order = commerce_cart_order_load($user->uid);
	commerce_order_status_update($order,'pending');
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$order_wrapper->field_orderattached->set(
		$form['customer_profile_non_paying_cu']['field_orderattached']
		['und']['#value']);	
	commerce_order_save($order);
	drupal_goto('checkout/' . $order->order_id);
}
function commerce_gopcheckout_finishorder($form, &$form_state) {
	$namevalue = $form['customer_profile_member']['field_wcgopordername']
		['und']['0']['value']['#value'];
	global $user;
	$order = commerce_cart_order_load($user->uid);
	$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
	$order_wrapper->field_wcgopordername->set($namevalue);
	commerce_order_save($order);
	drupal_goto('/ForumConfirmation');
}
function commerce_gopcheckout_commerce_email_order_items($variables) {

  // Get order wrapper.
  $order_wrapper = $variables['commerce_order_wrapper'];

  // Get rendered view.
  return views_embed_view('commerce_cart_summary', 'default', 
  	$order_wrapper->getIdentifier());
}
/*
*		Implement hook_views_api and other interfaces with views
*/
function commerce_gopcheckout_views_api() {
	return array(
		'api' => 3,
	);
}
function commerce_gopcheckout_views_pre_render(&$view){
	if ($view->name == 'golfoutingitems'){
		$header_item = $view->get_item('default','header','area');
		$myform = drupal_render(drupal_get_form(
			'commerce_gopcheckout_verification_form'));
		$view->set_item_option('default','header','area','content',
			$header_item['content'] . $myform );
	}	
}
function commerce_gopcheckout_views_post_render(&$view){
//	kpr($view);
}

function commerce_gopcheckout_verification_form($form, &$form_state) {
	$form = array();
	$form['email']= array(
    '#type' => 'textfield',
    '#title' => t('Please enter your E-mail Address in the box below, and then
    	click on the "Verify" button.  This is required before you can
    	make a purchase'),
    '#required' => TRUE,
    '#default_value' => "",
    '#description' =>
    'If you cannot remember your address, or do not have one, just enter NONE',
    '#size' => 60,
    '#maxlength' => 60,
  );
	$form['submit'] = array(
		'#type' => submit,
		'#value' => 'Verify',
		);
		return ($form);
}

?>